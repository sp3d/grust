/* This file is part of Grust, GObject introspection bindings for Rust
 *
 * Copyright (C) 2013  Mikhail Zabaluev <mikhail.zabaluev@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 */

#[link(name = "grust", vers = "0.1",
       uuid="e274cf32-7985-40e3-aa18-2dff719ab31d")];

#[crate_type = "lib"];

#[desc = "GObject introspection bindings"];
#[license = "LGPL 2.1"];
#[author = "Mikhail Zabaluev"];

use types::*;
use plumbing::GMainContext;
use plumbing::GMainLoop;
use plumbing::GTypeInstance;
use object::GType;

pub mod eventloop;
pub mod gstr;
pub mod object;
pub mod plumbing;
pub mod types;
mod init;

#[link_name="grustna"]
pub extern mod na {
    fn grustna_call(func: *u8,
                    data: *(),
                    context: *GMainContext) -> gboolean;
    fn grustna_main_loop_new_thread_local() -> *GMainLoop;
    fn grustna_main_loop_run_thread_local(l: *GMainLoop);
    fn grustna_run_with_init(callback: *u8, data: *());
}

#[link_name="glib-2.0"]
pub extern mod glib {
    fn g_free(mem: *());
    fn g_strdup(str: *gchar) -> *gchar;
    fn g_main_context_ref(context: *GMainContext) -> *GMainContext;
    fn g_main_context_unref(context: *GMainContext);
    fn g_main_loop_ref(l: *GMainLoop) -> *GMainLoop;
    fn g_main_loop_unref(l: *GMainLoop);
    fn g_main_loop_run(l: *GMainLoop);
    fn g_main_loop_quit(l: *GMainLoop);
}

#[link_name="gobject-2.0"]
pub extern mod gobject {
    fn g_type_init();
    fn g_object_ref(obj: *()) -> *();
    fn g_object_unref(obj: *()) -> *();
    fn g_type_check_instance_is_a(instance   : *GTypeInstance,
                                  iface_type : GType) -> gboolean;
    fn g_type_name(t: GType) -> *gchar;
}

// Reexports into the top level do not work outside of a crate
// due to https://github.com/mozilla/rust/issues/4202
pub type utf8 = gstr::utf8;

// For the same reason as above, init has to be proxied by a function below
#[inline]
pub fn init() { init::init(); }
