/* This file is part of Grust, GObject introspection bindings for Rust
 *
 * Copyright (C) 2013  Mikhail Zabaluev <mikhail.zabaluev@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 */

#[feature(globs)];

#[link(name = "grust-GObject", vers = "2.0",
       uuid="252902cd-7b58-41da-9478-c9488841c225")];

#[crate_type = "lib"];

#[feature(globs)];

extern mod grust (name="grust", vers="0.1");
extern mod glib (name="grust-GLib", vers="2.0");

use grust::object;

pub mod raw {
    use grust::types::*;
    use grust::object::GType;

    struct GTypeInstance {
        g_class: *(),
    }

    pub struct GObject {
        g_type_instance: GTypeInstance,
        ref_count      : guint,
        data           : *()
    }

    #[link_name="gobject-2.0"]
    extern {
        pub fn g_object_get_type() -> GType;
    }
}

pub mod classes {
    use grust::object;
    use raw;

    pub type Object = object::Interface<raw::GObject>;
}

impl object::ObjectType for raw::GObject {
    #[fixed_stack_segment]
    fn get_type() -> object::GType {
        unsafe {
            raw::g_object_get_type()
        }
    }
}
