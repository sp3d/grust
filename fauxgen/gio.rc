/* This file is part of Grust, GObject introspection bindings for Rust
 *
 * Copyright (C) 2013  Mikhail Zabaluev <mikhail.zabaluev@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 */

#![crate_id = "grust-Gio#2.0"]

#![crate_type = "lib"]

#![feature(globs)]

extern crate grust = "grust#0.1";
extern crate glib = "grust-GLib#2.0";
extern crate gobject = "grust-GObject#2.0";

extern crate libc;

use grust::plumbing;
use grust::object;
use grust::types::*;
use grust::gstr;
use std::mem;
use std::ptr;
use std::str;

pub mod raw {
    use grust::types::*;
    use grust::object::GType;
    use glib;
    use gobject;
    use libc;

    pub struct GAsyncResult;
    pub struct GFile;

    pub struct GCancellable {
        pub parent_instance: gobject::raw::GObject,
        _priv: *()
    }

    pub struct GInputStream {
        pub parent_instance: gobject::raw::GObject,
        _priv: *()
    }

    pub struct GFileInputStream {
        pub parent_instance: GInputStream,
        _priv: *()
    }

    #[link_name="gio-2.0"]
    extern {
        pub fn g_async_result_get_type() -> GType;
        pub fn g_file_get_type() -> GType;
        pub fn g_file_new_for_path(path: *gchar) -> *GFile;
        pub fn g_file_get_path(file: *GFile) -> *gchar;
        pub fn g_file_read_async    (file           : *GFile,
                                 io_priority    : libc::c_int,
                                 cancellable    : *GCancellable,
                                 callback       : extern "C" fn(*gobject::raw::GObject, *GAsyncResult, *()),
                                 user_data      : *());
        pub fn g_file_read_finish   (file   : *GFile,
                                 res    : *GAsyncResult,
                                 error  : **glib::raw::GError)
                                -> *GFileInputStream;
    }
}

pub mod classes {
    use grust::object;
    use raw;

    pub type Cancellable = object::Interface<raw::GCancellable>;
    pub type InputStream = object::Interface<raw::GInputStream>;
    pub type FileInputStream = object::Interface<raw::GFileInputStream>;
}

pub mod interfaces {
    use grust::object;
    use raw;

    pub type AsyncResult = object::Interface<raw::GAsyncResult>;
    pub type File = object::Interface<raw::GFile>;
}

pub type AsyncReadyCallback<'a> = |source_object : &'a gobject::classes::Object,
                                  res           : &'a interfaces::AsyncResult|:'a;

impl object::ObjectType for raw::GAsyncResult {
    fn get_type() -> object::GType {
        unsafe {
            raw::g_async_result_get_type()
        }
    }
}

impl object::ObjectType for raw::GFile {
    fn get_type() -> object::GType {
        unsafe {
            raw::g_file_get_type()
        }
    }
}

mod callbacks {
    use grust::plumbing;
    use grust::object;
    use raw;
    use gobject;
    use std::mem;

    pub extern fn async_ready_callback(source_object: *gobject::raw::GObject,
                                       res          : *raw::GAsyncResult,
                                       user_data    : *()) {
        unsafe {
            assert!(user_data.is_not_null());
            let cd: Box<plumbing::CallbackData>
                    = mem::transmute(user_data as *plumbing::CallbackData);
            assert!(cd.callback.is_not_null());
            let callback: Box<super::AsyncReadyCallback>
                          = mem::transmute(cd.callback
                                as *super::AsyncReadyCallback);
            let arg1 = object::make_interface(source_object, cd.context);
            let arg2 = object::make_interface(res, cd.context);
            (*callback)(&arg1, &arg2);
        }
    }
}

pub trait File {
    fn get_path(&self) -> gstr::utf8;
    fn read_async(&self,
                  io_priority: int,
                  cancellable: Option<&classes::Cancellable>,
                  callback: AsyncReadyCallback);
    fn read_finish(&self, res: &interfaces::AsyncResult)
                  -> object::Reference<raw::GFileInputStream>;
}

pub fn file_new_for_path(path: &str) -> object::Reference<raw::GFile> {
    unsafe {
        let mut out: (*plumbing::GMainContext, *raw::GFile)
                     = (ptr::null(), ptr::null());
        plumbing::call(ptr::null(), |_ctx| {
            let ret = path.with_c_str(|p| {
                    raw::g_file_new_for_path(p)
               });
            out = (_ctx, ret);
        });
        match out {
            (ctx, obj) => object::take_object(obj, ctx)
        }
    }
}

impl File for interfaces::File {
    fn get_path(&self) -> gstr::utf8 {
        unsafe {
            let mut out: *gchar = ptr::null();
            plumbing::call(self.context(), |_ctx| {
                out = raw::g_file_get_path(self.raw());
            });
            gstr::utf8::wrap(out)
        }
    }

    fn read_async(&self,
                  io_priority: int,
                  cancellable: Option<&classes::Cancellable>,
                  callback: AsyncReadyCallback) {
        unsafe {
            let raw_cancellable: *raw::GCancellable = match cancellable {
                Some(c) => c.raw(),
                None    => ptr::null()
            };
            let cb_data = box plumbing::CallbackData {
                    callback: mem::transmute(box callback),
                    context: ptr::null()
                };
            let cb_data_raw: *mut plumbing::CallbackData
                             = mem::transmute(cb_data);
            plumbing::call(self.context(), |_ctx| {
                (*cb_data_raw).context = _ctx;
                raw::g_file_read_async(self.raw(),
                        io_priority as libc::c_int,
                        raw_cancellable,
                        callbacks::async_ready_callback,
                        cb_data_raw as *());
            });
        }
    }

    fn read_finish(&self, res: &interfaces::AsyncResult)
                  -> object::Reference<raw::GFileInputStream> {
        unsafe {
            let mut out: (*plumbing::GMainContext,
                          *raw::GFileInputStream,
                          *glib::raw::GError)
                         = (ptr::null(), ptr::null(), ptr::null());
            plumbing::call(self.context(), |_ctx| {
                let error: *glib::raw::GError = ptr::null();
                let ret = raw::g_file_read_finish(self.raw(),
                        res.raw(), &error);
                out = (_ctx, ret, error);
            });
            match out {
                (ctx, obj, error) => {
                    if error.is_not_null() {
                        let msg = str::raw::from_c_str((*error).message);
                        glib::raw::g_error_free(error);
                        fail!(msg);
                    }
                    object::take_object(obj, ctx)
                }
            }
        }
    }
}
